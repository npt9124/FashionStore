@page "/category"
@using D05K14BlazorServerApp.Data
@using MySql.Data.MySqlClient
<!-- Điều hướng-->
@inject NavigationManager navigationManager
<PageTitle>Category</PageTitle>
<h3>List of Category: @catId</h3>
<Button Type="ButtonType.Link" Color="ButtonColor.Primary" To="category/create" Class="mb-3">Create a New Category</Button>
<Grid TItem="Category"
      Class="table table-hover table-bordered table-striped"
      DataProvider="CategoryDataProvider"
      AllowFiltering="true"
      AllowPaging="true"
      PageSize="5"
      AllowSorting="true"
      AllowSelection="true"
      Responsive="true">

    <GridColumn TItem="Category" HeaderText="Id" PropertyName="CatId" SortKeySelector="item => item.CatId">
        @context.CatId
    </GridColumn>
    <GridColumn TItem="Category" HeaderText="Name" PropertyName="CatName" SortKeySelector="item => item.CatName">
        @context.CatName
    </GridColumn>
    <GridColumn TItem="Category" HeaderText="Status" PropertyName="IsDeleted" SortKeySelector="item => item.IsDeleted">
        @if(context.IsDeleted == 1)
        {
            <Badge Color="BadgeColor.Danger" IndicatorType="BadgeIndicatorType.None">Deleted</Badge>
        }
        else
        {
            <Badge Color="BadgeColor.Success" IndicatorType="BadgeIndicatorType.None">Active</Badge>
        }
    </GridColumn>
    <GridColumn TItem="Category" HeaderText="Action">
        <Button Type="ButtonType.Link" Color="ButtonColor.Warning" To=@($"category/edit/{@context.CatId}")>Edit</Button>
        <Button Type="ButtonType.Button" 
                Color="ButtonColor.Danger" 
                @onclick="(CatId) => DeleteCategory(context.CatId)"
                Disabled = "@(context.IsDeleted == 1)"
        >Delete</Button>
    </GridColumn>

</Grid>
@code {
    private List<Category> categories;
    private int catId;
    protected override void OnInitialized()
    {
        categories = GetCategories();
    }

    private async Task<GridDataProviderResult<Category>> CategoryDataProvider(GridDataProviderRequest<Category> request)
    {
        if (categories is null) // pull categories only one time for client-side filtering, sorting, and paging
            categories = GetCategories(); // call a service or an API to pull the categories

        return await Task.FromResult(request.ApplyTo(categories));
    }


    private static List<Category> GetCategories()
    {
        List<Category> list = new List<Category>();
        try
        {
            string SqlGetCategories = "SELECT * FROM category ORDER BY cat_id";
            MySqlConnection conn = DBMySQL.GetMySqlConnection();
            conn.Open();
            MySqlCommand cmd = conn.CreateCommand();
            cmd.CommandText = SqlGetCategories;
            MySqlDataReader reader = cmd.ExecuteReader();
            while(reader.Read())
            {
                Category c = new Category();
                c.CatId = reader.GetInt32("cat_id");
                c.CatName = reader.GetString("cat_name");
                c.IsDeleted = reader.GetInt32("isDeleted");
                list.Add(c);
            }
            conn.Close();
        }catch(Exception ex) {}
        return list;
    }

    private void DeleteCategory(int id)
    {
        try
        {
            string SQLDelete = $"UPDATE category SET isDeleted = 1 WHERE cat_id = {id}";
            MySqlConnection conn = DBMySQL.GetMySqlConnection();
            conn.Open();
            MySqlCommand cmd = conn.CreateCommand();
            cmd.CommandText = SQLDelete;
            cmd.ExecuteNonQuery();
            conn.Close();
            navigationManager.NavigateTo("category", forceLoad: true);
        }
        catch (Exception ex) { }
    }
}